package module.signature.domain; 

enum module.signature.domain.data.SignatureFormat   as SignatureFormat;
enum module.signature.domain.data.SignatureDataFormat   as SignatureDataFormat;

class SignatureSystemRoot {
}


class Signature {
	DateTime createdDateTime;
	SignatureFormat signatureFormat;
	Boolean signed;
}

class data.SignatureData {
	SignatureDataFormat signatureDataFormat;
}

class data.CounterSignatureData extends data.SignatureData {
}

class data.FileSignatureData extends data.SignatureData {
}

class data.ObjectSignatureData extends data.SignatureData {
}

/*
 * Signature persistence - always in files
 */
 
external class .module.fileManagement.domain.VersionedFile;

/*
 * Relations
 */


relation SignatureUserUnsigned {
	.myorg.domain.User playsRole toBeSignedUser;
	Signature playsRole unsignedSignatures {
		multiplicity *;
	} 
}

relation SignatureUserSigned {
	.myorg.domain.User playsRole signedUser;
	Signature playsRole signedSignatures {
		multiplicity *;
	} 
}

relation SignatureSignatureData {
	data.SignatureData playsRole signatureData {
		multiplicity 1;
	}
	Signature playsRole signature {
		multiplicity 1;
	}
}


relation CounterSignatureDataSignature {
	Signature playsRole counterSignedSignature {
		multiplicity 1;
	}
	data.CounterSignatureData playsRole counterSignatures {
		multiplicity *;
	}
}

relation CounterSignatureDataCounterSignatureData {
	data.CounterSignatureData playsRole nextCounterSignatureData;
	data.CounterSignatureData playsRole previousCounterSignatureData;
}


// the persistence of the signatures is assured through these relations with versionedFile

relation FileSignatureDataVersionedFile {
	data.SignatureData playsRole signatureDomainObject;
	.module.fileManagement.domain.VersionedFile playsRole persistedSignature;
} 
	
// Root relations

relation SignatureSystemRootSignature {
	Signature playsRole signatures {
		multiplicity *;
	}
	SignatureSystemRoot playsRole signatureSystem;
}
